---
title: "Assignment 2"
author: "Frank Moeller"
---

# Remaining Questions

# Assignment 2

## Concept

-   2 actors interact (**interaction function**) exchange their wealth (**transaction function**)

## Implementation

### Initial Population distribution

```{r}
N<- 5000 # define N as default population size

MU<- 100 # define MU as the default population mean

population <- rnorm(N, mean = MU, sd = MU/5) # define the dataframe "population" as a normally distributed set of size "N" (5000) with a mean "M" (100$) and a sd of "MU/5" (20$) 

##what datastructur is this?
```

-   Gaussian (normal) distribution

-   dependent variable = simoleons (\$)

### Visualization

#### Measure

-   Gini coefficient (measure of equality)

    -   0=equality

    -   1=inequality

    -   ! Usually assessed for income, here wealth

```{r}
gini<- function(y) { 
# measure of equality (0=equality, 1=inequality) applied for wealth [usually for income]
y<- sort(y) #puts vector (wealth) of the dataframe in order
n<- length(y) #assess the lenght of the vector (individuals) in the dataframe 
## Question does length define the number of individuals?
numer<- 2*sum((1:n)*y)#defines the numerator of the formular
#sum(start value:end value)
#summs the sorted vecotr (wealth) of the dataframe and multiplies by 2

denom<- n*sum(y)#defines the denominator of the formular
#multiplies the number of participants by the sum of the wealth  

return ((numer/denom)-(n+1)/n)
#puts the formula together
}
```

#### Apply

```{r}
gini(population)
```

reference output: \~0.113

#### Define hist

```{r}
#install.packages("ggplot2")
library(ggplot2)
hist_custom<- function(popuation, label = 'pop',...) {
label <- paste0(label,": G", round(gini(population), 2))
# add and calculate the little gini coefficient in the top right corner

population_df<- data.frame(population = population)
#

ggplot(population_df, aes(x = population))+
  geom_histogram(bin=30,fill='blue',alpha=0.5,...)+
  labs(title=label,x='Wealth',y='Count')+
  theme_minimal()+
  theme(legend.position="none")
}
```

#### Visualize

```{r}
hist_custom(population)
```

### Transactions

#### Define Wealth-Conserving Transaction

```{r}
random_split<- function(A, B) {
  pot<- A+B #sum the wealth of the agent A and B
  share<- runif(1,min=0,max=pot)
  #define conditions for sharing (here all possible conditions)
  return(c(share,pot-share))
  #put formula together
  #one recives the share one the remaining wealth
  
  #A and B are undefined, insert their wealth to run the function
}
```

#### Apply

```{r}
random_split(100, 100)
```

reference output: \~(39.322, 160.678)

= sum should never exceed 200

### Interactions

```{r}
anyone <- function(N) {
  i <- sample(1:(N), 1)
  j <- sample(setdiff(1:(N), i), 1)  # Ensures i and j are different
### ERROR correction: ensures i and j are not the same value
### ERROR correction: ensures that i and j can not be 0
  return (c(i, j))
}
```

```{r}
anyone(N)
```

reference output: \[1593, 1439\]

=draws 2 random numbers from 1-N

### Simulation

#### Define

```{r}
transaction<- random_split
interaction<- anyone

step<-function(population)
  {
  #translate the defined functions into meaningfull names
  i_j<- interaction(length(population))
  i<- i_j[[1]]
  j<- i_j[[2]]
  ##ERROR fixed: doube bracket needed???
  #draw two agents called i & j
  population[c(i, j)]<- transaction(population[i],population[j])
  #run the transaction between the two agents (adjust their wealth according to the transaction)
  return (population)
}

simulate<- function(population,T) 
{
   #simulate the interactions over T iterations
  ##T needs to be defined whenever using the funktion
  pop_copy<- population
  #create a copy of population
  
  result<- list(pop_copy)
  ## to generate an initial overview of the wealth of all actors
  
  for (t in 1:T)
  {
    pop_copy<- step(pop_copy)
    #overwrite pop_copy with the result of step
    result[[t+1]]<- pop_copy
    #generate an output for every iteration of the simulation
  }
  return (result)
}
```

```{r}
testpopulation<- rep(100,4)
#create testpopulation of 4 individuals, with 100$ each

result<- simulate(testpopulation, 8)
#simulate the population over 8 steps

for(testpopulation in result)
{
  print(testpopulation)
}
```

ERROR: "Warning: NAs produced"

idears:

-   maybe the NA occures because the interaction function chooses the same person twice.

    -   I checked by inserting a set of for into anyone (with N=5000 chances are super low) --\>often got the value 0 --\> **might generate NAs**

-   the transaction leads to negative values

    -   I checked with print() and it never did

#### Visualize

##### Run Simulation --\> output for every 10th iteration

```{r}
testpopulation <- rep(100, 4)  # Initial population
max_iter<- 100

result <- simulate(testpopulation, max_iter)  # Running the simulation

# Loop to print testpopulation for each iteration, starting the iteration count from 0
#for (iteration in 0:(length(result) - 1)) {
for (tenth_number in 0:10){
  tenth_iter<-max_iter/10
  ##print values for iteration 0 to 10
  cat(tenth_iter * tenth_number, " ")
  ## cat = print
  ## print = print iteration nr. 1
  ## * Iter/10 = for every 10th of the total nr of iterations
  cat(result[[tenth_iter * tenth_number +1]], "\n")
  ## [[]] necessary for printing lists
  ## result = the result of simulate (matrix of all values for all iterations)
  ## formal writing: result[t] is how the population is at iteration t
  ## "\n" = new line
  }
```

##### print output sorted

```{r}
testpopulation <- rep(100, 4)  # Initial population
max_iter<- 100

result <- simulate(testpopulation, max_iter)  # Running the simulation

for (tenth_number in 0:10){
  tenth_iter<-max_iter/10
  cat(tenth_iter * tenth_number, " ")
  pop<-result[[tenth_iter * tenth_number +1]]
  sorted_pop<- sort(pop)
  #list that was the result before
  cat(sorted_pop, "\n")
  }
```

##### print with percentages

```{r}
max_person<-1000
testpopulation <- rep(100, max_person)  # Initial population
max_iter<- 10000
percentiles<- c(1, 10, 50, 90, 99)

result <- simulate(testpopulation, max_iter)  # Running the simulation

for (tenth_number in 0:10){
  tenth_iter<-max_iter/10
  cat(tenth_iter * tenth_number, " ")
  agent<-max_person/100*percentiles
  #lists the person corresponding to the right percentile for the population
  pop<-result[[tenth_iter * tenth_number +1]]
  sorted_pop<- sort(pop)
  #the sorted population we printed before
  for (X in agent) {
    #loop through variable agent and exert it for every value (percentiles)
    cat(as.integer(sorted_pop[[X]]), " ")
    #as.integer=sould be a full number (integer)
    #exert the operation: print the wealth of the person X
  }
  cat("\n")
}
```

##### add sd, and gini

```{r}
max_person<-1000
testpopulation <- rep(100, max_person)  # Initial population
max_iter<- 10000
percentiles<- c(1, 10, 50, 90, 99)

result <- simulate(testpopulation, max_iter)  # Running the simulation

cat("iter    gini    1%    10%    50%    90%    99% \n")
#creates header
for (tenth_number in 0:10){
  #the number from 0 to 10
  tenth_iter<-max_iter/10
  cat(tenth_iter * tenth_number, " ")
  agent<-max_person/100*percentiles
  #lists the person corresponding to the right percentile for the population
  pop<-result[[tenth_iter * tenth_number +1]]
  sorted_pop<- sort(pop)
  #the sorted population we printed before
  cat(round(gini(pop), 2)," ")
  # prints gini coefficient for every tenth iteration
  cat(round(sd(pop), 1)," ")
  for (X in agent) {
    #loop through variable agent and exert it for every value (percentiles)
    cat(as.integer(sorted_pop[[X]]), " ")
    #as.integer=sould be a full number (integer)
    #exert the operation: print the wealth of the person X
  }
  cat("\n")
  }
```

NOTE: I should change cat to print but I defined print somewhere as a number

```{r}
show(population)
```

##### attempt to generate dataframe

```{r}
tabula_1<- data.frame(
  iter_1 = c(1, 2, 3, 4),
  gini_1 = c(5, 6, 7, 8),
  sd_1 = c(29, 30, 31, 32),
  per01_1 = c(9, 10, 11, 12),
  per10_1 = c(13, 14, 15, 16),
  per50_1 = c(17, 18, 19, 20),
  per90_1 = c(21, 22, 23, 24),
  per99_1 = c(25, 26, 27, 28)
  )
colnames(tabula_1)<- c("t", "Gini", "stdev", "1%", "10%", "50%", "90%", "99%")
print(tabula_1)
```

##### combine

```{r}
per01_0<- c()
per10_0<- c()
per50_0<- c()
per90_0<- c()
per99_0<- c()
#generate empty variables

max_person<-1000
testpopulation <- rep(100, max_person)  # Initial population
max_iter<- 10000
percentiles<- c(1, 10, 50, 90, 99)

result <- simulate(testpopulation, max_iter)  # Running the simulation

for (tenth_number in 0:10){
  #the number from 0 to 10
  tenth_iter<-max_iter/10
  iter_0<- (tenth_iter * tenth_number)
  agent<-max_person/100*percentiles
  #lists the person corresponding to the right percentile for the population
  pop<-result[[tenth_iter * tenth_number +1]]
  sorted_pop<- sort(pop)
  #the sorted population we printed before
  gini_0<- (round(gini(pop), 2))
  # prints gini coefficient for every tenth iteration
  sd_0<- (round(sd(pop), 1))
  for (X in agent) {
    #loop through variable agent and exert it for every value (percentiles)
    per_all<- (as.integer(sorted_pop[[X]]))
    
    per01_0<- c(per01_0, per_all[[1]])
    per10_0<- c(per10_0, per_all[[2]])
    per50_0<- c(per50_0, per_all[[3]])
    per90_0<- c(per90_0, per_all[[4]])
    per99_0<- c(per99_0, per_all[[5]])
    #as.integer=sould be a full number (integer)
    #exert the operation: print the wealth of the person X
  }
  tabula_1<- data.frame(
  iter_1 = c(iter_0),
  gini_1 = c(gini_0),
  sd_1 = c(sd_0),
  per01_1 = c(per01_0),
  per10_1 = c(per10_0),
  per50_1 = c(per50_0),
  per90_1 = c(per90_0),
  per99_1 = c(per99_0)
  )
colnames(tabula_1)<- c("t", "Gini", "stdev", "1%", "10%", "50%", "90%", "99%")
print(tabula_1)
  }
```

```{r}
tabula_1<- data.frame(
  corresponding_iteration = c(1, 2, 3, 4),
  gini_coefficient = c(1, 2, 3, 4),
  first_percentile = c(1, 2, 3, 4),
  tenth_percentile = c(1, 2, 3, 4),
  fiftyth_percentile = c(1, 2, 3, 4),
  ninetieth_percentile = c(1, 2, 3, 4),
  ninetieninth_percentile = c(1, 2, 3, 4)
  )
print(tabula_1)
```
